{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (system-wide)",
      "language": "python",
      "metadata": {
        "cocalc": {
          "description": "Python 3 programming language",
          "priority": 100,
          "url": "https://www.python.org/"
        }
      },
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.8"
    },
    "colab": {
      "name": "Tugas2.ipynb",
      "provenance": []
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PDB9UOyp8TVw",
        "outputId": "122f159b-1c79-4abf-b795-338814db0e86"
      },
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A_uZVJpWDO0u",
        "outputId": "1755a15b-396d-483d-866b-ec362af454c5"
      },
      "source": [
        "cd /content/drive/MyDrive/Colab Notebooks"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "/content/drive/MyDrive/Colab Notebooks\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1IkPXCwDgRJC"
      },
      "source": [
        "# import the necessary packages\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.neural_network import MLPClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import classification_report\n",
        "# from sklearn.datasets import load_iris"
      ],
      "execution_count": 84,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3tAnSVBc4lor"
      },
      "source": [
        "# from sklearn.datasets import load_iris\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "ZLsTWZHS4n3I",
        "outputId": "339efc3e-7c76-46fe-c20c-8cbd9f9e8904"
      },
      "source": [
        "df = pd.read_csv('data_cancer.csv')\n",
        "# df = pd.read_excel(\"xxx.xls\", sheet_name=\"sheet 1\")\n",
        "df.head(5)\n",
        "# df (nampilin semua data)"
      ],
      "execution_count": 68,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>diagnosis</th>\n",
              "      <th>radius_mean</th>\n",
              "      <th>texture_mean</th>\n",
              "      <th>perimeter_mean</th>\n",
              "      <th>area_mean</th>\n",
              "      <th>smoothness_mean</th>\n",
              "      <th>compactness_mean</th>\n",
              "      <th>concavity_mean</th>\n",
              "      <th>concave points_mean</th>\n",
              "      <th>symmetry_mean</th>\n",
              "      <th>fractal_dimension_mean</th>\n",
              "      <th>radius_se</th>\n",
              "      <th>texture_se</th>\n",
              "      <th>perimeter_se</th>\n",
              "      <th>area_se</th>\n",
              "      <th>smoothness_se</th>\n",
              "      <th>compactness_se</th>\n",
              "      <th>concavity_se</th>\n",
              "      <th>concave points_se</th>\n",
              "      <th>symmetry_se</th>\n",
              "      <th>fractal_dimension_se</th>\n",
              "      <th>radius_worst</th>\n",
              "      <th>texture_worst</th>\n",
              "      <th>perimeter_worst</th>\n",
              "      <th>area_worst</th>\n",
              "      <th>smoothness_worst</th>\n",
              "      <th>compactness_worst</th>\n",
              "      <th>concavity_worst</th>\n",
              "      <th>concave points_worst</th>\n",
              "      <th>symmetry_worst</th>\n",
              "      <th>fractal_dimension_worst</th>\n",
              "      <th>Unnamed: 32</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>842302</td>\n",
              "      <td>M</td>\n",
              "      <td>17.99</td>\n",
              "      <td>10.38</td>\n",
              "      <td>122.80</td>\n",
              "      <td>1001.0</td>\n",
              "      <td>0.11840</td>\n",
              "      <td>0.27760</td>\n",
              "      <td>0.3001</td>\n",
              "      <td>0.14710</td>\n",
              "      <td>0.2419</td>\n",
              "      <td>0.07871</td>\n",
              "      <td>1.0950</td>\n",
              "      <td>0.9053</td>\n",
              "      <td>8.589</td>\n",
              "      <td>153.40</td>\n",
              "      <td>0.006399</td>\n",
              "      <td>0.04904</td>\n",
              "      <td>0.05373</td>\n",
              "      <td>0.01587</td>\n",
              "      <td>0.03003</td>\n",
              "      <td>0.006193</td>\n",
              "      <td>25.38</td>\n",
              "      <td>17.33</td>\n",
              "      <td>184.60</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>0.1622</td>\n",
              "      <td>0.6656</td>\n",
              "      <td>0.7119</td>\n",
              "      <td>0.2654</td>\n",
              "      <td>0.4601</td>\n",
              "      <td>0.11890</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>842517</td>\n",
              "      <td>M</td>\n",
              "      <td>20.57</td>\n",
              "      <td>17.77</td>\n",
              "      <td>132.90</td>\n",
              "      <td>1326.0</td>\n",
              "      <td>0.08474</td>\n",
              "      <td>0.07864</td>\n",
              "      <td>0.0869</td>\n",
              "      <td>0.07017</td>\n",
              "      <td>0.1812</td>\n",
              "      <td>0.05667</td>\n",
              "      <td>0.5435</td>\n",
              "      <td>0.7339</td>\n",
              "      <td>3.398</td>\n",
              "      <td>74.08</td>\n",
              "      <td>0.005225</td>\n",
              "      <td>0.01308</td>\n",
              "      <td>0.01860</td>\n",
              "      <td>0.01340</td>\n",
              "      <td>0.01389</td>\n",
              "      <td>0.003532</td>\n",
              "      <td>24.99</td>\n",
              "      <td>23.41</td>\n",
              "      <td>158.80</td>\n",
              "      <td>1956.0</td>\n",
              "      <td>0.1238</td>\n",
              "      <td>0.1866</td>\n",
              "      <td>0.2416</td>\n",
              "      <td>0.1860</td>\n",
              "      <td>0.2750</td>\n",
              "      <td>0.08902</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>84300903</td>\n",
              "      <td>M</td>\n",
              "      <td>19.69</td>\n",
              "      <td>21.25</td>\n",
              "      <td>130.00</td>\n",
              "      <td>1203.0</td>\n",
              "      <td>0.10960</td>\n",
              "      <td>0.15990</td>\n",
              "      <td>0.1974</td>\n",
              "      <td>0.12790</td>\n",
              "      <td>0.2069</td>\n",
              "      <td>0.05999</td>\n",
              "      <td>0.7456</td>\n",
              "      <td>0.7869</td>\n",
              "      <td>4.585</td>\n",
              "      <td>94.03</td>\n",
              "      <td>0.006150</td>\n",
              "      <td>0.04006</td>\n",
              "      <td>0.03832</td>\n",
              "      <td>0.02058</td>\n",
              "      <td>0.02250</td>\n",
              "      <td>0.004571</td>\n",
              "      <td>23.57</td>\n",
              "      <td>25.53</td>\n",
              "      <td>152.50</td>\n",
              "      <td>1709.0</td>\n",
              "      <td>0.1444</td>\n",
              "      <td>0.4245</td>\n",
              "      <td>0.4504</td>\n",
              "      <td>0.2430</td>\n",
              "      <td>0.3613</td>\n",
              "      <td>0.08758</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>84348301</td>\n",
              "      <td>M</td>\n",
              "      <td>11.42</td>\n",
              "      <td>20.38</td>\n",
              "      <td>77.58</td>\n",
              "      <td>386.1</td>\n",
              "      <td>0.14250</td>\n",
              "      <td>0.28390</td>\n",
              "      <td>0.2414</td>\n",
              "      <td>0.10520</td>\n",
              "      <td>0.2597</td>\n",
              "      <td>0.09744</td>\n",
              "      <td>0.4956</td>\n",
              "      <td>1.1560</td>\n",
              "      <td>3.445</td>\n",
              "      <td>27.23</td>\n",
              "      <td>0.009110</td>\n",
              "      <td>0.07458</td>\n",
              "      <td>0.05661</td>\n",
              "      <td>0.01867</td>\n",
              "      <td>0.05963</td>\n",
              "      <td>0.009208</td>\n",
              "      <td>14.91</td>\n",
              "      <td>26.50</td>\n",
              "      <td>98.87</td>\n",
              "      <td>567.7</td>\n",
              "      <td>0.2098</td>\n",
              "      <td>0.8663</td>\n",
              "      <td>0.6869</td>\n",
              "      <td>0.2575</td>\n",
              "      <td>0.6638</td>\n",
              "      <td>0.17300</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>84358402</td>\n",
              "      <td>M</td>\n",
              "      <td>20.29</td>\n",
              "      <td>14.34</td>\n",
              "      <td>135.10</td>\n",
              "      <td>1297.0</td>\n",
              "      <td>0.10030</td>\n",
              "      <td>0.13280</td>\n",
              "      <td>0.1980</td>\n",
              "      <td>0.10430</td>\n",
              "      <td>0.1809</td>\n",
              "      <td>0.05883</td>\n",
              "      <td>0.7572</td>\n",
              "      <td>0.7813</td>\n",
              "      <td>5.438</td>\n",
              "      <td>94.44</td>\n",
              "      <td>0.011490</td>\n",
              "      <td>0.02461</td>\n",
              "      <td>0.05688</td>\n",
              "      <td>0.01885</td>\n",
              "      <td>0.01756</td>\n",
              "      <td>0.005115</td>\n",
              "      <td>22.54</td>\n",
              "      <td>16.67</td>\n",
              "      <td>152.20</td>\n",
              "      <td>1575.0</td>\n",
              "      <td>0.1374</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.4000</td>\n",
              "      <td>0.1625</td>\n",
              "      <td>0.2364</td>\n",
              "      <td>0.07678</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         id diagnosis  ...  fractal_dimension_worst  Unnamed: 32\n",
              "0    842302         M  ...                  0.11890          NaN\n",
              "1    842517         M  ...                  0.08902          NaN\n",
              "2  84300903         M  ...                  0.08758          NaN\n",
              "3  84348301         M  ...                  0.17300          NaN\n",
              "4  84358402         M  ...                  0.07678          NaN\n",
              "\n",
              "[5 rows x 33 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 68
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_EvzBkNa6wV5",
        "outputId": "27792083-b6a2-4f67-ab07-f98f20b617a4"
      },
      "source": [
        "test_X = df.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]].values\n",
        "print(test_X)"
      ],
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1.799e+01 1.038e+01 1.228e+02 ... 2.654e-01 4.601e-01 1.189e-01]\n",
            " [2.057e+01 1.777e+01 1.329e+02 ... 1.860e-01 2.750e-01 8.902e-02]\n",
            " [1.969e+01 2.125e+01 1.300e+02 ... 2.430e-01 3.613e-01 8.758e-02]\n",
            " ...\n",
            " [1.660e+01 2.808e+01 1.083e+02 ... 1.418e-01 2.218e-01 7.820e-02]\n",
            " [2.060e+01 2.933e+01 1.401e+02 ... 2.650e-01 4.087e-01 1.240e-01]\n",
            " [7.760e+00 2.454e+01 4.792e+01 ... 0.000e+00 2.871e-01 7.039e-02]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "vwUdBnpI4fMX"
      },
      "source": [
        "X = df.iloc[:,[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31]].values\n",
        "Y = df.iloc[:,[1]].values"
      ],
      "execution_count": 78,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KwM9k-xaER1p",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5adaf1a0-87c5-4688-f78a-df1c4031ff77"
      },
      "source": [
        "print(Y)"
      ],
      "execution_count": 79,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['B']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['M']\n",
            " ['B']]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pIpKU3x85Z5y",
        "outputId": "b843eb84-fa77-493d-8283-24c336078120"
      },
      "source": [
        "target_names = df['diagnosis'].unique()\n",
        "print(target_names)"
      ],
      "execution_count": 80,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "['M' 'B']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_xTqq4V7q7J",
        "outputId": "8cba97fa-edd7-4a0f-9bc8-db0544364b59"
      },
      "source": [
        "print(X.shape)\n",
        "print(Y.shape)"
      ],
      "execution_count": 81,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(569, 30)\n",
            "(569, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FLHeiyhI4VCT",
        "outputId": "008a06a3-0cb5-4d4c-98ee-ee6f8d5a19aa"
      },
      "source": [
        "(trainX, testX, trainY, testY) = train_test_split(X, Y, random_state=3, test_size=0.2)\n",
        "print(trainX.shape)\n",
        "print(testX.shape)\n",
        "print(trainY.shape)\n",
        "print(testY.shape)"
      ],
      "execution_count": 85,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(455, 30)\n",
            "(114, 30)\n",
            "(455, 1)\n",
            "(114, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l6vqEgqCgRJf"
      },
      "source": [
        "# define the dictionary of models our script can use, where the key\n",
        "# to the dictionary is the name of the model (supplied via command\n",
        "# line argument) and the value is the model itself\n",
        "models = {\n",
        "\t\"knn\": KNeighborsClassifier(n_neighbors=3),\n",
        "\t\"naive_bayes\": GaussianNB(),\n",
        "\t\"logit\": LogisticRegression(solver=\"lbfgs\", multi_class=\"auto\"),\n",
        "\t\"svm\": SVC(kernel=\"rbf\", gamma=\"auto\"),\n",
        "\t\"decision_tree\": DecisionTreeClassifier(),\n",
        "\t\"random_forest\": RandomForestClassifier(n_estimators=100),\n",
        "\t\"mlp\": MLPClassifier()\n",
        "}"
      ],
      "execution_count": 86,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "UAmEPiyMgRJm",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ccd6857f-5ce9-4a7b-b010-1f2de9cfc594"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"knn\"))\n",
        "model = models[\"knn\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 87,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'knn' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',\n",
              "                     metric_params=None, n_jobs=None, n_neighbors=3, p=2,\n",
              "                     weights='uniform')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 87
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pMst7JNbgRJo",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b52d3bda-846a-447c-b56f-7fcb4e34d206"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(predictions)"
      ],
      "execution_count": 88,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "['B' 'B' 'B' 'B' 'M' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'B'\n",
            " 'M' 'B' 'B' 'B' 'B' 'M' 'B' 'B' 'B' 'M' 'M' 'M' 'M' 'B' 'M' 'B' 'B' 'B'\n",
            " 'B' 'B' 'M' 'M' 'M' 'B' 'B' 'M' 'B' 'B' 'B' 'M' 'M' 'B' 'M' 'B' 'B' 'M'\n",
            " 'M' 'B' 'B' 'M' 'B' 'B' 'B' 'B' 'M' 'M' 'B' 'B' 'M' 'B' 'M' 'M' 'B' 'B'\n",
            " 'M' 'M' 'B' 'M' 'B' 'M' 'B' 'M' 'M' 'B' 'B' 'B' 'M' 'M' 'B' 'B' 'B' 'B'\n",
            " 'M' 'M' 'M' 'B' 'B' 'M' 'B' 'M' 'B' 'B' 'B' 'B' 'B' 'B' 'B' 'M' 'M' 'B'\n",
            " 'M' 'B' 'B' 'M' 'B' 'B']\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Puym9l3iF4LO",
        "outputId": "55e9844d-d6da-4082-831a-8489e1e8c2ba"
      },
      "source": [
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 89,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.95      0.95      0.95        74\n",
            "           B       0.90      0.90      0.90        40\n",
            "\n",
            "    accuracy                           0.93       114\n",
            "   macro avg       0.92      0.92      0.92       114\n",
            "weighted avg       0.93      0.93      0.93       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KaVoaNHOgRJu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6d0b986e-ad15-4b8f-fc33-b1ba89a91817"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"naive_bayes\"))\n",
        "model = models[\"naive_bayes\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 90,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'naive_bayes' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/naive_bayes.py:206: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "GaussianNB(priors=None, var_smoothing=1e-09)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 90
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mcB3GEAGgRJw",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5a02425-74fb-4f39-c2a5-8d0ed79b9e49"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 91,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.93      0.96      0.95        74\n",
            "           B       0.92      0.88      0.90        40\n",
            "\n",
            "    accuracy                           0.93       114\n",
            "   macro avg       0.93      0.92      0.92       114\n",
            "weighted avg       0.93      0.93      0.93       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ag3ekIj7gRJx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f59beeaf-6e83-4302-b88b-f876664eaf23"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"logit\"))\n",
        "model = models[\"logit\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 92,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'logit' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,\n",
              "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
              "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
              "                   random_state=None, solver='lbfgs', tol=0.0001, verbose=0,\n",
              "                   warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 92
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MZ_5q-Y6gRJz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f154896b-e8ec-49bf-d012-9b611a9bb548"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 93,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.92      0.95      0.93        74\n",
            "           B       0.89      0.85      0.87        40\n",
            "\n",
            "    accuracy                           0.91       114\n",
            "   macro avg       0.91      0.90      0.90       114\n",
            "weighted avg       0.91      0.91      0.91       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "YpMbga3dgRJz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "863938d4-055f-4a12-862f-74d576cf8172"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"svm\"))\n",
        "model = models[\"svm\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 94,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'svm' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "SVC(C=1.0, break_ties=False, cache_size=200, class_weight=None, coef0=0.0,\n",
              "    decision_function_shape='ovr', degree=3, gamma='auto', kernel='rbf',\n",
              "    max_iter=-1, probability=False, random_state=None, shrinking=True,\n",
              "    tol=0.001, verbose=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 94
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ouv_k7vsgRJ0",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "163d6e45-e2aa-49a0-cd83-75873a9211b1"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.65      1.00      0.79        74\n",
            "           B       0.00      0.00      0.00        40\n",
            "\n",
            "    accuracy                           0.65       114\n",
            "   macro avg       0.32      0.50      0.39       114\n",
            "weighted avg       0.42      0.65      0.51       114\n",
            "\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hl-fW3p9gRJ2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "58c58c6a-c25f-4fc4-8b7a-d5e4ef382110"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"decision_tree\"))\n",
        "model = models[\"decision_tree\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'decision_tree' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
              "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
              "                       random_state=None, splitter='best')"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 96
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SM2l7Dl4gRJ4",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f309614-9730-4a02-ef96-3e0ab790f115"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.93      0.91      0.92        74\n",
            "           B       0.83      0.88      0.85        40\n",
            "\n",
            "    accuracy                           0.89       114\n",
            "   macro avg       0.88      0.89      0.89       114\n",
            "weighted avg       0.90      0.89      0.90       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "l1Qtpf0UgRJ5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e98dc67a-95ec-4230-e4e1-fd5361603c0f"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"random_forest\"))\n",
        "model = models[\"random_forest\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 98,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'random_forest' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:4: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples,), for example using ravel().\n",
            "  after removing the cwd from sys.path.\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,\n",
              "                       criterion='gini', max_depth=None, max_features='auto',\n",
              "                       max_leaf_nodes=None, max_samples=None,\n",
              "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
              "                       min_samples_leaf=1, min_samples_split=2,\n",
              "                       min_weight_fraction_leaf=0.0, n_estimators=100,\n",
              "                       n_jobs=None, oob_score=False, random_state=None,\n",
              "                       verbose=0, warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 98
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fohWRtxcgRKA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e786367-099b-4423-ad4f-bfad562d7ee9"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.95      0.95      0.95        74\n",
            "           B       0.90      0.90      0.90        40\n",
            "\n",
            "    accuracy                           0.93       114\n",
            "   macro avg       0.92      0.92      0.92       114\n",
            "weighted avg       0.93      0.93      0.93       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "QNdRh3_8gRKB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c0f0ae2-a081-40a3-9a5c-89738179177e"
      },
      "source": [
        "# train the model\n",
        "print(\"[INFO] using '{}' model\".format(\"mlp\"))\n",
        "model = models[\"mlp\"]\n",
        "model.fit(trainX, trainY)"
      ],
      "execution_count": 100,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] using 'mlp' model\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/neural_network/_multilayer_perceptron.py:934: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n",
            "  y = column_or_1d(y, warn=True)\n"
          ],
          "name": "stderr"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "MLPClassifier(activation='relu', alpha=0.0001, batch_size='auto', beta_1=0.9,\n",
              "              beta_2=0.999, early_stopping=False, epsilon=1e-08,\n",
              "              hidden_layer_sizes=(100,), learning_rate='constant',\n",
              "              learning_rate_init=0.001, max_fun=15000, max_iter=200,\n",
              "              momentum=0.9, n_iter_no_change=10, nesterovs_momentum=True,\n",
              "              power_t=0.5, random_state=None, shuffle=True, solver='adam',\n",
              "              tol=0.0001, validation_fraction=0.1, verbose=False,\n",
              "              warm_start=False)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 100
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "dtSKouEIgRKC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "feeea951-c0b2-4247-c027-3c9acadeee8d"
      },
      "source": [
        "# make predictions on our data and show a classification report\n",
        "print(\"[INFO] evaluating...\")\n",
        "predictions = model.predict(testX)\n",
        "print(classification_report(testY, predictions,\n",
        "\ttarget_names=target_names))"
      ],
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] evaluating...\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           M       0.93      0.96      0.95        74\n",
            "           B       0.92      0.88      0.90        40\n",
            "\n",
            "    accuracy                           0.93       114\n",
            "   macro avg       0.93      0.92      0.92       114\n",
            "weighted avg       0.93      0.93      0.93       114\n",
            "\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ExhmHl7Q5t7_"
      },
      "source": [
        "# **Artificial Neural Network**"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Eu7aptJJgRKE"
      },
      "source": [
        "# import the necessary packages\n",
        "from keras.models import Sequential\n",
        "# from keras.layers.convolutional import Conv2D\n",
        "# from keras.layers.convolutional import MaxPooling2D\n",
        "from keras.layers.core import Activation\n",
        "# from keras.layers.core import Flatten\n",
        "from keras.layers.core import Dense\n",
        "from keras.optimizers import Adam\n",
        "from sklearn.preprocessing import LabelBinarizer\n",
        "# from sklearn.model_selection import train_test_split\n",
        "#from sklearn.metrics import classification_report\n",
        "# from PIL import Image\n",
        "# from imutils import paths\n",
        "# import numpy as np\n",
        "# import os"
      ],
      "execution_count": 123,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "SH24XaG3AnPu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad58f109-1c51-48f0-ba63-246c6a957c5b"
      },
      "source": [
        "Y"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['B'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['M'],\n",
              "       ['B']], dtype=object)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 124
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "897YXSjv55ZC",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0393d19b-1e8c-46df-fb48-c5cb3f47cf4f"
      },
      "source": [
        "# encode the labels, converting them from strings to integers\n",
        "lb = LabelBinarizer()\n",
        "labels = lb.fit_transform(Y)\n",
        "print(labels)"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [0]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [1]\n",
            " [0]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_pcXvXBq59PY",
        "outputId": "48c7f52f-8c2a-45a3-ad99-2527ec753e4a"
      },
      "source": [
        "(trainX, testX, trainY, testY) = train_test_split(X,\tnp.array(labels), test_size=0.2)\n",
        "print(trainX.shape)\n",
        "print(testX.shape)\n",
        "print(trainY.shape)\n",
        "print(testY.shape)"
      ],
      "execution_count": 148,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(455, 30)\n",
            "(114, 30)\n",
            "(455, 1)\n",
            "(114, 1)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "73GGlwI76EkY"
      },
      "source": [
        "#model ANN\n",
        "\n",
        "model = Sequential(\n",
        "    [\n",
        "        Dense(32, activation=\"relu\", input_shape=(30,)), #hidden layer 1\n",
        "        Dense(16, activation=\"relu\"), #hidden layer 2\n",
        "        # Dense(16, activation=\"relu\"),\n",
        "        # Dense(8, activation=\"relu\"),\n",
        "        Dense(1, activation = \"softmax\"),\n",
        "    ]\n",
        ")"
      ],
      "execution_count": 149,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oWptPSzZ6V-_",
        "outputId": "1d1a587b-b3f8-4684-d5ef-34df626cdebc"
      },
      "source": [
        "model.summary()"
      ],
      "execution_count": 150,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_9\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "dense_30 (Dense)             (None, 32)                992       \n",
            "_________________________________________________________________\n",
            "dense_31 (Dense)             (None, 16)                528       \n",
            "_________________________________________________________________\n",
            "dense_32 (Dense)             (None, 1)                 17        \n",
            "=================================================================\n",
            "Total params: 1,537\n",
            "Trainable params: 1,537\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-IoP9cED60mA",
        "outputId": "a9508158-30c9-4f61-ee5a-6e67321e4d23"
      },
      "source": [
        "# train the model using the Adam optimizer\n",
        "print(\"[INFO] training network...\")\n",
        "opt = Adam(lr=1e-3, decay=1e-3 / 50)\n",
        "model.compile(loss=\"binary_crossentropy\", optimizer=opt, #2 kelas --> binary_crossentropy\n",
        "\tmetrics=[\"accuracy\"])\n",
        "H = model.fit(trainX, trainY, validation_data=(testX, testY), epochs=20, batch_size=20)"
      ],
      "execution_count": 151,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[INFO] training network...\n",
            "Epoch 1/20\n",
            "23/23 [==============================] - 1s 12ms/step - loss: 24.9684 - accuracy: 0.3450 - val_loss: 9.9514 - val_accuracy: 0.3772\n",
            "Epoch 2/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 5.6420 - accuracy: 0.3485 - val_loss: 0.4999 - val_accuracy: 0.3772\n",
            "Epoch 3/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.4870 - accuracy: 0.3636 - val_loss: 0.2483 - val_accuracy: 0.3772\n",
            "Epoch 4/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2318 - accuracy: 0.4045 - val_loss: 0.3509 - val_accuracy: 0.3772\n",
            "Epoch 5/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2290 - accuracy: 0.3635 - val_loss: 0.2293 - val_accuracy: 0.3772\n",
            "Epoch 6/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3159 - accuracy: 0.3776 - val_loss: 0.4641 - val_accuracy: 0.3772\n",
            "Epoch 7/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3077 - accuracy: 0.3797 - val_loss: 0.3301 - val_accuracy: 0.3772\n",
            "Epoch 8/20\n",
            "23/23 [==============================] - 0s 5ms/step - loss: 0.2883 - accuracy: 0.3670 - val_loss: 0.2348 - val_accuracy: 0.3772\n",
            "Epoch 9/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2686 - accuracy: 0.3477 - val_loss: 0.3662 - val_accuracy: 0.3772\n",
            "Epoch 10/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2452 - accuracy: 0.3749 - val_loss: 0.2981 - val_accuracy: 0.3772\n",
            "Epoch 11/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3265 - accuracy: 0.3379 - val_loss: 0.2391 - val_accuracy: 0.3772\n",
            "Epoch 12/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2244 - accuracy: 0.3800 - val_loss: 0.2200 - val_accuracy: 0.3772\n",
            "Epoch 13/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2424 - accuracy: 0.3706 - val_loss: 0.2239 - val_accuracy: 0.3772\n",
            "Epoch 14/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2592 - accuracy: 0.3800 - val_loss: 0.4253 - val_accuracy: 0.3772\n",
            "Epoch 15/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3555 - accuracy: 0.3310 - val_loss: 0.4994 - val_accuracy: 0.3772\n",
            "Epoch 16/20\n",
            "23/23 [==============================] - 0s 5ms/step - loss: 0.2213 - accuracy: 0.3616 - val_loss: 0.4115 - val_accuracy: 0.3772\n",
            "Epoch 17/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3658 - accuracy: 0.3860 - val_loss: 0.4154 - val_accuracy: 0.3772\n",
            "Epoch 18/20\n",
            "23/23 [==============================] - 0s 5ms/step - loss: 0.2476 - accuracy: 0.3442 - val_loss: 0.2524 - val_accuracy: 0.3772\n",
            "Epoch 19/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.3477 - accuracy: 0.3263 - val_loss: 0.1954 - val_accuracy: 0.3772\n",
            "Epoch 20/20\n",
            "23/23 [==============================] - 0s 4ms/step - loss: 0.2350 - accuracy: 0.3995 - val_loss: 0.2095 - val_accuracy: 0.3772\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 590
        },
        "id": "-SOALOs_6-IY",
        "outputId": "e7f96afa-3c11-4c3d-8ad3-8686efb0e731"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "print(H.history.keys())\n",
        "# summarize history for accuracy\n",
        "plt.plot(H.history['accuracy'])\n",
        "plt.plot(H.history['val_accuracy'])\n",
        "plt.title('model accuracy')\n",
        "plt.ylabel('accuracy')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "# summarize history for loss\n",
        "plt.plot(H.history['loss'])\n",
        "plt.plot(H.history['val_loss'])\n",
        "plt.title('model loss')\n",
        "plt.ylabel('loss')\n",
        "plt.xlabel('epoch')\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "execution_count": 152,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "dict_keys(['loss', 'accuracy', 'val_loss', 'val_accuracy'])\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MyjLvi1l7CsX"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}